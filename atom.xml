<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>moefh.github.io</title>
  <subtitle>The Magic Smoke Has Left the Building</subtitle>
  <link href="https://moefh.github.io/atom.xml" rel="self"/>
  <link href="https://moefh.github.io/"/>
  <updated>2021-08-15T19:31:20.000</updated>
  <id>https://moefh.github.io/</id>
  <author>
    <name>MoeFH</name>
  </author>
  <generator uri="https://moefh.github.io/">BloGen</generator>
  <entry>
    <title>Pico Homemade MIDI USB Keyboard</title>
    <link href="https://moefh.github.io/2021/08/15/Pico-Homemade-MIDI-USB-Keyboard/"/>
    <id>https://moefh.github.io/2021/08/15/Pico-Homemade-MIDI-USB-Keyboard/</id>
    <published>2021-08-15T19:31:20.000</published>
    <updated>2021-08-15T19:31:20.000</updated>
    <content type="html"><![CDATA[<p>
I made a very simple homemade MIDI keyboard USB device using the Raspberry Pi Pico:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/08/15/Pico-Homemade-MIDI-USB-Keyboard/photo.jpg" alt="MIDI keyboard device built using a Pico attached to another Pico  acting as a hardware  debugger" title="MIDI keyboard device built using a Pico attached to another Pico  acting as a hardware  debugger">
  <div class="image-caption">MIDI keyboard device built using a Pico attached to another Pico  acting as a hardware  debugger</div>
</div>

<p>
The keyboard is just 12 buttons arranged as a vague semblance of a
piano keyboard (just one octave).  Each button closes the connection
to ground when pressed, and is connected to an input pin of the Pico
which is pulled up, so when the button is pressed the input goes low.
</p>

<p>
I used TinyUSB to make the Pico act as a MIDI USB device when
connected to a PC. The program is really simple: I just changed a MIDI
example included in the TinyUSB project, adapting it to send MIDI
notes when the buttons are pressed, with some very rudimentary
debouncing for the buttons.
</p>

<p>
This project gave me an excuse to learn how to program and debug a
Pico using another Pico as the hardware debugger, using picoprobe (I
had to do it because I usually <code>printf</code> debug using the USB serial,
but that obviously wouldn't work in this project).  To use picoprobe
you just have to flash the Pico that will be used as the debugger with
the picoprobe firmware (<code>picoprobe.uf2</code>) and make some connections
from its GPIO pins to the Pico being debugged (SWD pins and the UART
RX/TX).
</p>

<p>
Everything went really smoothly, so there's nothing much to say, other
than Picoprobe is a great way to upload programs to the Pico: there's
no need to reset with the Bootsel button pressed.  I might start using
it even when I'm not using the USB for anything else.  You can also
actually run GDB to debug the program live on the Pico, but I rarely
use GDB like that.
</p>

<p>
On the MIDI device side of things, it works really great on Windows. I
was even able to record a crappy song I played on the crappy keyboard
using <a href="https://www.midieditor.org/">MidiEditor</a>, even though there's
some noticeable input lag.
</p>

<p>
On Linux, I see no input lag when dumping the MIDI events with
<code>aseqdump</code> (an Alsa command line program), but I had no luck recording
input from the MIDI device using MIDI editors or other GUI programs.
Every GUI program I tried wasn't able to receive MIDI input -- most of
them just crash when trying to connect to Jack (which is installed and
running, but for some reason doesn't work), and the ones that can be
configured to use Alsa simply don't work when told to do so.  I have
no energy to try to make this work, so I'll have to use Windows if I
want to do more with this project.
</p>

<p>
In any case, this was a fun little project to learn how to make the
Pico into a USB device and use Picoprobe.

</p>]]></content>
  </entry>
  <entry>
    <title>Porting Loser Corps to the Raspberry Pi Pico - Part 2</title>
    <link href="https://moefh.github.io/2021/07/31/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico-Part-2/"/>
    <id>https://moefh.github.io/2021/07/31/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico-Part-2/</id>
    <published>2021-07-31T14:45:14.000</published>
    <updated>2021-07-31T14:45:14.000</updated>
    <content type="html"><![CDATA[<p>
I finished bringing the Loser Corps port on the Pico on par with the
ESP32, and then added sound output supporting 4 sounds plus music at
the same time, with music coming from a MOD player I wrote from
scratch for the Pico.
</p>

<p class="header-1">Sound Hardware</p>

<p>
First, let's look at the hardware side. This is my homemade sound
amplifier board:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/07/31/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico-Part-2/amplifier.jpg" alt="Homemade amplifier using an  LM386" title="Homemade amplifier using an  LM386">
  <div class="image-caption">Homemade amplifier using an  LM386</div>
</div>

<p>
The input is at the 3-pin female header at the top (VCC, GND and
input) and the output is at the 2-pin male header on the left (GND and
output).  This board is very similar to what I had in the last post in
the breadboard, I just changed some capacitor values and moved the
potentiometer for the volume control to go between the input coupling
capacitor (now 2.2 μF) and the LM386. Here is the updated schematic:
</p>

<div class="image">
  <img width="640" height="340" src="/2021/07/31/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico-Part-2/amp-schematic.png" alt="Homemade amplifier using an `LM386`" title="Homemade amplifier using an `LM386`">
  <div class="image-caption">Homemade amplifier using an `LM386`</div>
</div>

<p>
One thing I didn't mention in the last post is that I tried using
generic potentiometers for the volume control, but the metal casing
added a lot of noise (this may be be a common thing, or it might be
just because I live pretty close to some big radio towers, I have no
idea). I ended up buying the sound table potentiometers you see in the
photos, they're more expensive but work pretty well.
</p>

<p class="header-1">Sound Code</p>

<p>
Now, the software side.  The sound code is based on the setup I had on
the last post, with the addition of MOD music playing. It can play
music plus up to 4 other sounds at the same time.
</p>

<p>
The music is played with a simple MOD player I wrote from scratch for
the Pico.  The player supports only 4 channels (easily changed in a
<code>#define</code>) and is currently missing a lot of MOD effects like tremolo
and vibrato, but it's good enough to play a really good <a href="https://modarchive.org/index.php?request=view_by_moduleid&query=177642">Axel F
MOD</a>
pretty close to what VLC does, so I'm happy with it. I also tested it
with the MOD files from Flashback (the game from 1992) and a few other
MODs from <a href="https://modarchive.org/">modarchive.org</a>.
</p>

<p>
The player modulates notes by streching or compressing the input
samples to the required sample rate, always choosing the nearest input
sample (think scaling an image using the "nearest" algorithm).  It
causes aliasing but it's very fast -- I use a fixed point number
(<code>20.12</code>) to store the index of the current sample, and add <code>fi/fo</code> to
it after playing each sample, where <code>fi</code> is the sample rate of the
note and <code>fo</code> is the sample rate of the output sound (22050Hz).  So if
the MOD requests a sample to be played at 22050Hz, <code>fi/fo</code> would be
<code>1</code> and the sample would be played without any modulation (i.e., each
input sample would be sent exactly once to the output); if the
frequency requested is 11025Hz (half), then <code>fi/fo</code> would be <code>0.5</code> and
each input sample would be sent twice since it would take two
additions to the sample index to advance to the next sample.
</p>

<p>
Of course things are a little more complicated than that, because MOD
files store the sample frequency as periods of the original Amiga
clock (7.09379 MHz), so there's some annoying math involved (the
annoying part is in making sure we get a reasonable precision while
avoiding overflow).  To get the gory details, see the file
<code>game/lib/mod_player.c</code> on Github.
</p>

<p>
I might improve the MOD player in the future, but I'm pretty happy
with it for now.
</p>

<p>
Other than the MOD player, I added some sound effects. There's a small
"bump" sound then the player character hits the ground (I recorded it
by gently tapping a microphone some 20 years ago when making the game
on PC) and a generic explosion sound when a shot hits something (taken
from a free sound library from 20 years ago).
</p>

<p class="header-1">Other Code Improvements</p>

<p>
And finally, not related to sound at all, a small improvement: I added
some tile caching when drawing the screen to improve the speed, making
sure the game never drops under 60 frames per second.  Some parts of
the map use too many different tiles, which used to cause problems
because the CPU couldn't stream data from the flash fast enough to
draw the entire screen in 16 miliseconds. So I copy some of the
most-used tiles to RAM at the start, and that fixes the problem.
</p>

<p>
As usual, the code is on
<a href="https://github.com/moefh/pico-loser">Github</a>.

</p>]]></content>
  </entry>
  <entry>
    <title>Sound Output with the Raspberry Pi Pico</title>
    <link href="https://moefh.github.io/2021/07/17/Sound-Output-with-the-Raspberry-Pi-Pico/"/>
    <id>https://moefh.github.io/2021/07/17/Sound-Output-with-the-Raspberry-Pi-Pico/</id>
    <published>2021-07-17T17:35:06.000</published>
    <updated>2021-07-17T17:35:06.000</updated>
    <content type="html"><![CDATA[<p>
I started playing with sound with the Raspberry Pi Pico.  I'm using
using an LM386 amplifier and an old 8Ω speaker:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/07/17/Sound-Output-with-the-Raspberry-Pi-Pico/breadboard.jpg" alt="Photo of the Pico, the LM386 amplifier and the speaker" title="Photo of the Pico, the LM386 amplifier and the speaker">
  <div class="image-caption">Photo of the Pico, the LM386 amplifier and the speaker</div>
</div>

<p>
For the sound generation code, I'm using the PWM/DMA method described
in <a href="https://gregchadwick.co.uk/blog/playing-with-the-pico-pt3/">this blog
post</a>.  It
uses PWM sounds with 8-bit samples at 22050 Hz.  I wrote a simple
mixer on top of that to play multiple sounds at the same time, and an
easy-to-use API for starting sounds with the option to loop, since
I'll add this to the Pico <a href="/2021/06/06/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico">Loser Corps port</a>.
</p>

<p>
This is the schematic for the sound output:
</p>

<div class="image">
  <img width="640" height="340" src="/2021/07/17/Sound-Output-with-the-Raspberry-Pi-Pico/amp-schematic.png" alt="Sound output schematic" title="Sound output schematic">
  <div class="image-caption">Sound output schematic</div>
</div>

<p>
I'm using a voltage divider with 2.2K/1K to bring the sound signal in
the range 0-1V in with a 100nF capacitor in parallel to filter the
unwanted high frequencies, connecting the result to the input of the
LM386 using a potentiometer for volume control.  The rest of the
schematic was taken from the "typical application" section of the
LM386 datasheet.  Leaving its pins 1, 7 and 8 not connected results in
a gain of 20, which is enough for my tests.
</p>

<p>
I had to change some resistors and capacitors because I didn't have
the recommended values available. The 75Ω connected to the <code>SOUND_PIN</code>
was meant to be a 68Ω, and the 100nF capacitor on the LM386 output was
meant to be 50nF.
</p>

<p>
I also decided to use a 1000μF capacitor on the LM386 output instead
of the 250μF recommended by the datasheet to try to improve the bass.
I don't think it matters too much with that crappy speaker, but it
doesn't hurt.
</p>

<p>
The overall sound quality is not that great: the sample size is 8
bits, and the whole thing is mounted on a breadbord. But it's usable
for now, and probably good enough for the game sound effects.
</p>

<p>
The code keeps playing a synth sound on loop, and queues a small drum
sound when you press the button. For completeness, here's the
schematic showing the Pico connections, including the button that
triggers the drum sound:
</p>

<div class="image">
  <img width="300" height="350" src="/2021/07/17/Sound-Output-with-the-Raspberry-Pi-Pico/pico-schematic.png" alt="Pico connections schematic" title="Pico connections schematic">
  <div class="image-caption">Pico connections schematic</div>
</div>

<p>
The code is set up to mix up to 4 sounds, so if you press the
button too quickly it will start ignoring presses until there are less
than 4 sound playing at the same time.
</p>

<p>
The sound generation code is in <code>audio.c</code> and <code>audio.h</code>, this is the
API:
</p>

<div class="multiline-code-wrapper">
<div class="multiline-code">
<pre>  // init
  audio_init(SOUND_PIN);
  
  // play once (use the returned sound_id to control volume or stop)
  int sound_id = audio_play_once(samples, num_samples);

  // set audio volume (8.8 fixed point)
  audio_source_set_volume(sound_id, 3<<8);

  // play in loop (3rd argument says where to start the loop)
  sound_id = audio_play_loop(samples, num_samples, 0);

  // stop playing
  audio_source_stop(sound_id);
</pre>
</div>
</div>

<p>
The mixer must be manually called at least once every 45 milliseconds
or so (this interval depends on the sound buffer size configured in
<code>audio.h</code>; a larger buffer allows for more time between calls at the
expense of more latency for starting sounds):
</p>

<div class="multiline-code-wrapper">
<div class="multiline-code">
<pre>  while (1) {
    audio_mixer_step();

    // ... other code ...

    sleep_ms(30);
  }
  
</pre>
</div>
</div>

<p>
As usual, the code is <a href="https://github.com/moefh/pico-audio-demo">on
Github</a>.

</p>]]></content>
  </entry>
  <entry>
    <title>New VGA Boards</title>
    <link href="https://moefh.github.io/2021/06/13/New-VGA-Boards/"/>
    <id>https://moefh.github.io/2021/06/13/New-VGA-Boards/</id>
    <published>2021-06-13T20:19:43.000</published>
    <updated>2021-06-13T20:19:43.000</updated>
    <content type="html"><![CDATA[<p>
In the process of creating a new perfboard to connect the Pico to a
VGA monitor, I realized that all the VGA DACs I made so far are using
only half the voltage range, which results in a very dark image all
around.
</p>

<p>
Here's what I figure happened: the initial schematic I drew for a the
DAC used a 75 Ohm resistor to ground, which I initially put there to
represent the one inside the monitor (so I could calculate the values
for the other resistors). Later, when building the boards, I put that
75 Ohm resistor on the board, so there were TWO 75 Ohm resistors to
ground in parallel, which results in everything being roughly half the
voltage it's supposed to be.  Later, when looking at that schematic, I
though I had put that resistor there for impedance matching (which I
knew was not really right), so I left it alone.
</p>

<p>
When I started builiding a perfboard for the Pico (to make it more
permanent that the breadboard I had last week), I decided to calculate
everything from scratch, and I realized the mistake.  My correction
still uses a 75 Ohm to ground, but the other resistors have much lower
values to compensate.  The current drawn from the pins is much larger,
but still below 15 mA, so I think that will bo OK for the Pico and the
ESP32.
</p>

<p>
Here's the new schematic for each DAC:
</p>

<div class="image">
  <img width="313" height="281" src="/2021/06/13/New-VGA-Boards/dac-schematic.png" alt="New DAC schematic" title="New DAC schematic">
  <div class="image-caption">New DAC schematic</div>
</div>

<p>
And here's the Loser Corps screen with the new DACs:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/06/13/New-VGA-Boards/screen-new-dacs.jpg" alt="Loser Corps running on the Pico with the new DACs" title="Loser Corps running on the Pico with the new DACs">
  <div class="image-caption">Loser Corps running on the Pico with the new DACs</div>
</div>

<p>
Here's the screen with the old DACs for comparison:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/06/13/New-VGA-Boards/screen-old-dacs.jpg" alt="Screen with the old DACs" title="Screen with the old DACs">
  <div class="image-caption">Screen with the old DACs</div>
</div>

<p>
The new perfboards have the resistors soldered on the main board where
the the Pico and the ESP32 are inserted, and the small boards with the
VGA connectors have with nothing but female headers with 6 pins to
connect to the main board.  This way, if I ever want to change DACs
again, I don't have to solder wires to the VGA connector (which is a
very unpleasant job).
</p>

<div class="image">
  <img width="640" height="480" src="/2021/06/13/New-VGA-Boards/perfboards.jpg" alt="New perfboards" title="New perfboards">
  <div class="image-caption">New perfboards</div>
</div>

<p>
The Pico board has two sets of connections for I2C (for the Wii
Nunchuk). I'll add these connections to the ESP32 board later.

</p>]]></content>
  </entry>
  <entry>
    <title>Porting Loser Corps to the Raspberry Pi Pico</title>
    <link href="https://moefh.github.io/2021/06/06/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico/"/>
    <id>https://moefh.github.io/2021/06/06/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico/</id>
    <published>2021-06-06T23:16:02.000</published>
    <updated>2021-06-06T23:16:02.000</updated>
    <content type="html"><![CDATA[<p>
I decided to take a break from porting Loser Corps to the ESP32, and
do something completely different: port Loser Corps to the Raspberry
Pi Pico!
</p>

<div class="image">
  <img width="640" height="480" src="/2021/06/06/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico/screen.jpg" alt="Loser Corps rendered on the Raspberry Pi  Pico" title="Loser Corps rendered on the Raspberry Pi  Pico">
  <div class="image-caption">Loser Corps rendered on the Raspberry Pi  Pico</div>
</div>

<p>
The
<a href="https://www.raspberrypi.org/products/raspberry-pi-pico/specifications/">Pico</a>
is smaller than the ESP32, with about half as much RAM, flash and
clock frequency:
</p>

<div class="table-wrapper"><div class="table-scroll">
<table>
<tr>
<th align="right">ESP32-WROOM</th><th align="center">Feature</th><th align="left">Raspberry Pi Pico</th></tr>
<tr>
<td align="right">(2x) Tensilica Xtensa LX6</td><td align="center">Processor</td><td align="left">(2x) Arm Cortex-M0+</td></tr>
<tr>
<td align="right">240 MHz</td><td align="center">Clock</td><td align="left">133 MHz</td></tr>
<tr>
<td align="right">520 KB</td><td align="center">RAM</td><td align="left">264 KB</td></tr>
<tr>
<td align="right">4 MB</td><td align="center">Flash</td><td align="left">2 MB</td></tr>
<tr>
<td align="right">2.4 GHz</td><td align="center">WiFi</td><td align="left">nope</td></tr>
</table></div></div>


<p>
The Pico (like the ESP32) can adjust its main clock frequency: 133 MHz
is the official maximum, but I'm using it at 125 MHz because that
makes VGA signal generation much simpler: the 12.5 MHz pixel clock
required for the 320x240 VGA mode is exactly 1/10 of the main clock
(well, technically it should be 12.59 MHz, but 12.5 is close enough).
</p>

<div class="image">
  <img width="480" height="640" src="/2021/06/06/Porting-Loser-Corps-to-the-Raspberry-Pi-Pico/pico.jpg" alt="The Pico connected to my homemade DACs and a Wii Nunchuk. Ignore the row of LEDs on the second breadboard, I was using them to debug the output of my PIO program." title="The Pico connected to my homemade DACs and a Wii Nunchuk. Ignore the row of LEDs on the second breadboard, I was using them to debug the output of my PIO program.">
  <div class="image-caption">The Pico connected to my homemade DACs and a Wii Nunchuk. Ignore the row of LEDs on the second breadboard, I was using them to debug the output of my PIO program.</div>
</div>

<p>
There are some <a href="https://github.com/raspberrypi/pico-playground/tree/master/scanvideo">example
programs</a>
that output VGA using an official <a href="https://github.com/raspberrypi/pico-extras/tree/master/src/common/pico_scanvideo">library provided by the Raspberry
Pi
Foundation</a>,
but they don't work with my old CRT monitor.  I haven't looked at the
library or the examples too closely, but it seems that the pixel clock
they use is too far away from the spec for my monitor: 640x480 should
be 25.18 MHz, and from what I can tell the examples use 24.0 MHz.
</p>

<p>
One of the cool things about the Pico is that it has a programmable
input/output (PIO) hardware interface, which is basically a tiny
specialized processor that can run programs that perform I/O
operations independently from the main cores.  I used the PIO (fed via
DMA) for the VGA output.
</p>

<p>
After a lot of trial and failure, I went with an extremely simple PIO
program: it's just a single instruction that gets data from the DMA
and feeds it one byte at a time to 8 output pins.  The data has to be
prepared exactly the right way so the output is a correctly-timed VGA
signal, which is stays right as long as the PIO program runs at a
fixed frequency equal to the VGA pixel clock.  In practice, this means
that the images still need vertical and horizontal sync bits embedded
in them, like in the ESP32.
</p>

<p>
Maybe I will make a more complex PIO program when I get more
experience with it. It would be nice to make the program generate the
vertical and horizontal sync signals automatically, and free 2 bits of
image data for colors: we could have 3:3:2 bits for red:green:blue,
increasing the number of colors from 64 to 256.  For now, though, the
output is exactly the same as the ESP32 (2:2:2), which is nice because
I don't have to make new homemade DAC boards to connect to the
monitor.  Still, a really good advantage of the PIO (even running my
brain-dead program) over the I2S bus we use on the ESP32 is that it
doesn't scramble the byte order.
</p>

<p>
Even after everything was running, I ended up with problems with the
IRQ handler for the DMA completion (which restarts the DMA to keep the
PIO fed with data).  When the CPU got too busy (for example, in areas
of the map with too many things on the screen), the IRQ was being
delayed enough do disrupt the video signal, and my monitor <b>really</b>
didn't like it.  In the end I managed to make the render loop run
entirely without CPU supervision (it runs entirely on DMA shoving data
into the PIO), and it only generates and IRQ for frame counting, which
the game code uses to synchronize the framebuffer swapping (to avoid
screen tearing).
</p>

<p>
The only parts actually done right now are the rendering and joystick
input (Wii nunchuk and classic controller only). The character control
and collision detection will be done soon.

</p>]]></content>
  </entry>
  <entry>
    <title>Porting Loser Corps to the ESP32 - Part 7</title>
    <link href="https://moefh.github.io/2021/05/23/Porting-Loser-Corps-to-the-ESP32-Part-7/"/>
    <id>https://moefh.github.io/2021/05/23/Porting-Loser-Corps-to-the-ESP32-Part-7/</id>
    <published>2021-05-23T19:49:31.000</published>
    <updated>2021-05-23T19:49:31.000</updated>
    <content type="html"><![CDATA[<p>
<i>More progress in porting Loser Corps to the ESP32 (see <a href="/tags/esp32-loser">all posts about the port</a>).</i>
</p>

<p>
The game now sends shots over the network, so players can see each
other's shots:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/05/23/Porting-Loser-Corps-to-the-ESP32-Part-7/screen.jpg" alt="Two players shooting" title="Two players shooting">
  <div class="image-caption">Two players shooting</div>
</div>

<p>
(Please excuse me for not showing the two systems and screens
side-by-side, it's a pain to move everything around only to take a
quick picture.)
</p>

<p>
Another change: the game runs at 320x240 with WiFi enabled even when
compiled under the Arduino IDE, since I found out how to decrease the
number of WiFi buffers without recompiling the ESP-IDF WiFi component.
It turns out that the number of rx/tx buffers used in WiFi is set in
the struct returned by <code>WIFI_INIT_CONFIG_DEFAULT()</code>, which initializes
the fields to values defined in the WiFi component configuration.
Decreasing the values before passing the struct to <code>esp_wifi_init()</code>
does the trick.
</p>

<p>
To make it work in the Arduino IDE, I just had to stop using the
Arduino <code>WiFi</code> object and use the ESP-IDF API directly.  One small
snag I ran into was that the ESP-IDF version used by the Arduino Core
is pretty old, and to initialize the network you had to call
<code>tcpip_adapter_init()</code> instead of the current <code>esp_netif_init()</code>.
Once I solved that, the network code compiles and runs with no
problems.  There's just an annoying error that pops out in the serial
complaining that I haven't created an event loop, which I think is
required for the Arduino Core <code>WiFi</code> object to receive WiFi events.
The game seems to run fine without it, though.
</p>

<p>
As usual, the source code is here:
<a href="https://github.com/moefh/esp32-loser">https://github.com/moefh/esp32-loser</a>
</p>]]></content>
  </entry>
  <entry>
    <title>Porting Loser Corps to the ESP32 - Part 6</title>
    <link href="https://moefh.github.io/2021/05/16/Porting-Loser-Corps-to-the-ESP32-Part-6/"/>
    <id>https://moefh.github.io/2021/05/16/Porting-Loser-Corps-to-the-ESP32-Part-6/</id>
    <published>2021-05-16T23:28:12.000</published>
    <updated>2021-05-16T23:28:12.000</updated>
    <content type="html"><![CDATA[<p>
<i>More progress in porting Loser Corps to the ESP32 (see <a href="/tags/esp32-loser">all posts about the port</a>).</i>
</p>

<p>
The game now runs with networking enabled while using the full 320x240
resolution:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/05/16/Porting-Loser-Corps-to-the-ESP32-Part-6/photo.jpg" alt="Two ESP32s talking to each other via ESP-NOW, each one controlling a character (note also the Wii Classic Controller)" title="Two ESP32s talking to each other via ESP-NOW, each one controlling a character (note also the Wii Classic Controller)">
  <div class="image-caption">Two ESP32s talking to each other via ESP-NOW, each one controlling a character (note also the Wii Classic Controller)</div>
</div>

<p>
To fit WiFi and the two 320x240 framebuffers in memory, I had to make
some changes: first, don't use Bluetooth -- so the Wiimote is out.
Luckily I now can use the Wii Classic Controller (as shown in the
picture) or Wii Nunchuk, so that's not a big deal.
</p>

<p>
Second, I had to decrease the number of transmit and receive buffers
used by the WiFi library.  This can't be changed in with the Arduino
Core for the ESP32, so I can't use the Arduino IDE for this.  Using
the ESP-IDF framework, this (and a lot more) can be changed with
<code>idf.py menuconfig</code>:
</p>

<div class="image">
  <img width="820" height="515" src="/2021/05/16/Porting-Loser-Corps-to-the-ESP32-Part-6/menuconfig.png" alt="Adjusting the number of WiFi receive buffers" title="Adjusting the number of WiFi receive buffers">
  <div class="image-caption">Adjusting the number of WiFi receive buffers</div>
</div>

<p>
Thankfully it's not too much of a hassle to use the same code with the
two APIs (which is not that surprising, since the Arduino Core is just
an added layer on top of the ESP-IDF).  The largest hurdle was to
learn how to set the CPU clock using the ESP-IDF (it's a lot more
involved than I thought, I ended up lifting code from the Arduino
Core) and to support the Wiimote library, which uses the Bluetooth API
from the Arduino Core (so once more I lifted some code from there).
</p>

<p>
In the end, it was fun and I learned a little bit about FreeRTOS
(which the Arduino Core completely hides) in order to run my code on
one of the CPUs of the ESP32 and let the WiFi and other stuff use the
other one.
</p>

<p>
The other change in the game since the last update post was the
addition of Wii Nunchuk and Classic Controller support via I2C with my
<a href="https://github.com/moefh/esp32-wii-nunchuk">esp32-wii-nunchuk</a>
library.
</p>

<p>
After plugging the library to the game code, I noticed that sometimes
the I2C read from the controller gets stuck for a little bit.  Usually
that's not a big problem, but for this game any hiccup is really
noticeable and annoying (the engine <b>really</b> wants to run at 60fps).
So I had to add some functions to the library to run a loop that reads
the controller state in a different CPU core than the game engine, and
it ended up working really well.
</p>

<p>
The source code for the version of the game that uses the Arduino API
is here:
<a href="https://github.com/moefh/esp32-loser">https://github.com/moefh/esp32-loser</a>. I
haven't published the version using the ESP-IDF yet, but it just adds
some stuff to compile under ESP-IDF.
</p>

<p>

</p>]]></content>
  </entry>
  <entry>
    <title>Using Wii I2C Controllers on the ESP32</title>
    <link href="https://moefh.github.io/2021/05/15/Using-Wii-I2C-Controllers-on-the-ESP32/"/>
    <id>https://moefh.github.io/2021/05/15/Using-Wii-I2C-Controllers-on-the-ESP32/</id>
    <published>2021-05-15T12:38:48.000</published>
    <updated>2021-05-15T12:38:48.000</updated>
    <content type="html"><![CDATA[<p>
I wrote a very simple library to make the ESP32 talk via I2C to Wii
controllers like the Wii Nunchuk and the Wii Classic Controller.
</p>

<p>
There are a few libraries around that do this for the Arduino using
the <a href="https://www.arduino.cc/en/reference/wire"><code>Wire</code> library</a>, but
for some reason that doesn't work consistently with the ESP32 and the
Wii controllers.  So I wrote the I2C communication using the <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/i2c.html">ESP-IDF
API</a>,
and it works really well, except that for some reason I wasn't able to
make it work at 400KHz (which is supposedly what the Wii controllers
accept), only at 100KHz.  That's a little disappointing, but good
enough for my purposes, which is using the controllers in the ESP32
port of Loser Corps.
</p>

<p>
While playing with it, I wrote a little test program to display the
state of the connected controller on a small OLED screen (SSD1306),
which is controlled using the <a href="https://github.com/adafruit/Adafruit_SSD1306">Adafruit SSD1306
library</a> also via I2C,
but using the <code>Wire</code> library:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/05/15/Using-Wii-I2C-Controllers-on-the-ESP32/photo.jpg" alt="Testing the Wii Classic Controler" title="Testing the Wii Classic Controler">
  <div class="image-caption">Testing the Wii Classic Controler</div>
</div>

<p>
When using the Wii Classic Controller, the screen shows two triangles
that point on the direction where you move the sticks, growing in size
as you move the stick farther along.  Pressing each button lights a
corresponding character on the screen, and pulling the analog triggers
increases the size of two bars that appear on the left side.
</p>

<p>
When using the Wii Nunchuk, the screen shows a single triangle with
the status of the nunchuk stick and three bars to the left that show
the status of the X, Y and Z accelerometer readings.  Pressing C or Z
displays the corresponding letter on the screen.
</p>

<p>
I wrote this small test program mostly for fun, but it tests something
important: that my library, which uses I2C via ESP-IDF, can coexist
with <code>Wire</code> library.  When using them together, you just have to be
careful not to use the same ESP32 I2C port with the two libraries at
the same time.  In this program, my library uses I2C port 0 and the
<code>Wire</code> library uses I2C port 1 (by using the <code>Wire1</code> object).
</p>

<p>
The source code for the library is here:
<a href="https://github.com/moefh/esp32-wii-nunchuk">https://github.com/moefh/esp32-wii-nunchuk</a>

</p>]]></content>
  </entry>
  <entry>
    <title>Porting Loser Corps to the ESP32 - Part 5</title>
    <link href="https://moefh.github.io/2021/04/17/Porting-Loser-Corps-to-the-ESP32-Part-5/"/>
    <id>https://moefh.github.io/2021/04/17/Porting-Loser-Corps-to-the-ESP32-Part-5/</id>
    <published>2021-04-17T14:04:59.000</published>
    <updated>2021-04-17T14:04:59.000</updated>
    <content type="html"><![CDATA[<p>
<i>More progress in porting Loser Corps to the ESP32 (see <a href="/tags/esp32-loser">all posts about the port</a>).</i>
</p>

<p>
This is just a quick update: I have added shooting to the game.  You
shoot by pressing ② in the Wiimote (or <code>D</code> in the Arduino joystick).
There can be at most 14 shots active at once, and they do nothing but
fly in a straight line until they hit a wall or the edge of the map.
</p>

<div class="image">
  <img width="640" height="480" src="/2021/04/17/Porting-Loser-Corps-to-the-ESP32-Part-5/shot.jpg" alt="Scheenshot of projectile (the camera doesn't like moving objects, in  reality it's less blurry than shown  here)" title="Scheenshot of projectile (the camera doesn't like moving objects, in  reality it's less blurry than shown  here)">
  <div class="image-caption">Scheenshot of projectile (the camera doesn't like moving objects, in  reality it's less blurry than shown  here)</div>
</div>

<p>
I also ported the game to use the ESP-IDF framework (as opposed to the
Arduino framework, which originally used).  I'm trying to see if I can
decrease the memory used by the WiFi system so the game can use full
320x240 resolution while in networked mode, and the EDP-IDF framework
has lots of configuration options.  I haven't made much progress with
it yet: I was just recently able to make the game run at full speed,
after finding that I have to set not ony the processor clock to 240MHz
but also the flash SPI clock to 80MHz (apparently the flash speed is a
bottleneck, which is not surprising since we copy images directly from
flash to the framebuffer).
</p>

<p>
As usual, the source is on
<a href="https://github.com/moefh/esp32-loser">Github</a> (I realize I haven't
written this before, so from now on I'll start adding this link to
every post).
</p>]]></content>
  </entry>
  <entry>
    <title>Porting Loser Corps to the ESP32 - Part 4</title>
    <link href="https://moefh.github.io/2021/04/04/Porting-Loser-Corps-to-the-ESP32-Part-4/"/>
    <id>https://moefh.github.io/2021/04/04/Porting-Loser-Corps-to-the-ESP32-Part-4/</id>
    <published>2021-04-04T00:10:58.000</published>
    <updated>2021-04-04T00:10:58.000</updated>
    <content type="html"><![CDATA[<p>
<i>More progress in porting Loser Corps to the ESP32 (see <a href="/tags/esp32-loser">all posts about the port</a>).</i>
</p>

<p>
Working on the game network code, I was able to make two players (each
running their own game a separate ESP32) see each other's characters:
</p>

<div class="image">
  <img width="640" height="480" src="/2021/04/04/Porting-Loser-Corps-to-the-ESP32-Part-4/loser-net1.jpg" alt="First player (using the Arduino Joystick)" title="First player (using the Arduino Joystick)">
  <div class="image-caption">First player (using the Arduino Joystick)</div>
</div>

<div class="image">
  <img width="640" height="480" src="/2021/04/04/Porting-Loser-Corps-to-the-ESP32-Part-4/loser-net2.jpg" alt="Second player (using the Wiimote)." title="Second player (using the Wiimote).">
  <div class="image-caption">Second player (using the Wiimote).</div>
</div>

<p>
They're using
<a href="https://www.espressif.com/en/products/software/esp-now/overview">ESP-NOW</a>
(a protocol made by Espressif, the makers of ESP32) to communicate.
Currently code is very simple, it's really just a proof-of-concept.
Each ESP32 keeps broadcasting messages containing its character's
position and frame.  When it receives a message, it puts a second
character at the received location with the received frame to
represent the remote player.
</p>

<p>
The network part was much easier than expected, I got it running a
couple of hours after I was able to get WiFi running inside the game
(I had researched how to send and receive messages using ESP-NOW prior
to that).  The hard part was freeing enough memory to get the WiFi
system to start in the first place.  If you look closely at the
monitors in the photos, you can see that the image's borders are cut
at the sides: the drawing area is only 240x240 pixels (as opposed to
the usual 320x240).  The monitor still thinks it's using the old
resolution, in effect what I did was increase the horizontal front-
and back-porch of the VGA timing, which decreases the horizontal
resolution but keeps everything else unchanged (crucially, the hsync
timing).
</p>

<p>
That took care of the RAM, but we also had a ROM problem: with the
added WiFi library, the program binary itself ended up too big to fit
the flash (at least with the default Arduino IDE settings). So I
removed some sprites, an entire tileset (<code>castle</code>) and cut some tiles
from another tileset (<code>castle3</code>).  To do that I made the <code>conv_spr</code>
tool (in the <code>conv_img</code> directory in the Github repository) -- it's an
improvement of the tool I had made before but hadn't released.
</p>

<p>
The nice side of all that work is that now it's much easier to change
the resolution with the new VGA code.  It can also select between
using double framebuffers (as before) or a single framebuffer.  I made
that when researching ways to decrease VGA memory use -- it turns out
that the game <b>almost</b> runs well enough with a single framebuffer, but
it's not quite fast enough to draw the whole screen during
<a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval">vblank</a>
(the time when the monitor is not actively drawing the image), so the
top portion of the screen gets a little messed up if we try.  That's
why the solution I chose at the end was to decrease the resolution and
keep using two framebuffers, but I kept the code to use a single
framebuffer in case I need it for another project in the future.
</p>

<p>

</p>]]></content>
  </entry>
</feed>

